{"version":3,"sources":["components/Posts.js","components/PaginationItem.js","components/PaginationPostPerPage.js","components/PaginationPostComponent.js","App.js","serviceWorker.js","index.js"],"names":["Posts","posts","isLoading","Row","className","Col","ListGroup","map","post","Item","key","id","title","PaginationItem","postPerPage","totalPost","onPageChange","currentPage","active","pageNumbers","totalNumberOfPages","Math","ceil","i","push","tempPageNumber","length","sliced","slice","sliced1","sliced2","xs","Pagination","Prev","disabled","onClick","page","index","Badge","variant","Next","PaginationPostPerPage","changeDisplayedResultsPerPage","ButtonGroup","aria-label","Button","value","e","PaginationPostComponent","someData","useState","setCurrentPage","setPostPerPage","indexOfLastPost","indexOfFirstPost","currentPosts","Container","href","target","pageNumber","App","isError","resource","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3cce086.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ListGroup, Row, Col } from 'react-bootstrap';\r\n\r\nconst Posts = ({ posts, isLoading }) => {\r\n\r\n    return (\r\n        <Row className='my-4 '>\r\n            <Col>\r\n                { isLoading ? ( <div>Loading ...</div>\r\n                ):(\r\n                    <ListGroup>\r\n                        {posts.map((post) => {\r\n                            return (<ListGroup.Item key={post.id}><span className='text-primary'>{post.id}. </span>\r\n                                <span>{post.title}</span></ListGroup.Item>)\r\n                        })}\r\n                    </ListGroup>\r\n                )\r\n                }\r\n            </Col>\r\n        </Row>\r\n    )\r\n\r\n\r\n};\r\n\r\nexport default Posts;\r\n","import React from 'react';\r\nimport { Pagination, Row, Col, Badge } from 'react-bootstrap';\r\n\r\nconst PaginationItem = ({ postPerPage, totalPost, onPageChange, currentPage }) => {\r\n\r\n    let active = currentPage;\r\n    let pageNumbers = [];\r\n    let totalNumberOfPages = Math.ceil(totalPost / postPerPage)\r\n    for (let i = 1; i <= totalNumberOfPages; i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    /**\r\n     * If have more than 10 pages logic\r\n     */\r\n    let tempPageNumber = pageNumbers;\r\n    if(pageNumbers.length <= 6){\r\n        tempPageNumber = pageNumbers;\r\n    } else {\r\n        if ( currentPage>=1 && currentPage <= 3){\r\n            tempPageNumber = [1, 2, 3, 4, '...', pageNumbers.length-1, pageNumbers.length];\r\n        }\r\n        else if(currentPage === 4){\r\n            const sliced = pageNumbers.slice(0,5);\r\n            tempPageNumber = [...sliced, ' ...', pageNumbers.length];\r\n        }\r\n        else if(currentPage > 4 && currentPage < pageNumbers.length-2){\r\n            const sliced1 = pageNumbers.slice(currentPage-2, currentPage);\r\n            const sliced2 = pageNumbers.slice(currentPage, currentPage+1);\r\n            tempPageNumber = [1, 2, '... ', ...sliced1, ...sliced2, ' ...', pageNumbers.length];\r\n        }\r\n        else if(currentPage > pageNumbers.length - 3){\r\n            const sliced = pageNumbers.slice(pageNumbers.length-4);\r\n            tempPageNumber = [1, 2, '... ', ...sliced];\r\n        }\r\n    }\r\n\r\n    return (\r\n            <Row className='my-4 justify-content-md-center font-pagination-size'>\r\n                <Col xs='auto'>\r\n                    <Pagination>\r\n                        <Pagination.Prev disabled={currentPage === 1} onClick={() => onPageChange(currentPage-1)}/>\r\n                        {\r\n                            tempPageNumber.map((page, index) => {\r\n                                return(\r\n                                    <Pagination.Item key={index} active={page === active} onClick={() => onPageChange(page)} >\r\n                                        <Badge variant=\"light\">{page}</Badge>\r\n                                    </Pagination.Item>\r\n                                )\r\n                            })\r\n                        }\r\n                        <Pagination.Next disabled={currentPage === totalNumberOfPages} onClick={() => onPageChange(currentPage+1)}/>\r\n                    </Pagination>\r\n                </Col>\r\n            </Row>\r\n    )\r\n};\r\n\r\nexport default PaginationItem;\r\n","import React from 'react';\r\nimport { ButtonGroup, Row, Col, Button } from 'react-bootstrap';\r\n\r\nconst PaginationPostPerPage = ({ changeDisplayedResultsPerPage, postPerPage }) => {\r\n\r\n    let active = postPerPage;\r\n    return (\r\n        <Row className='my-4 justify-content-md-center'>\r\n            <Col xs='auto'>\r\n                <p className='font-weight-bold text-danger'>\r\n                    Choose how many results you want to see per page\r\n                </p>\r\n                <div>\r\n                    <ButtonGroup className='mr-2' aria-label='First group'>\r\n                        <Button variant='outline-primary' active={active==5} value={5} onClick={(e)=>{changeDisplayedResultsPerPage(e)}}>5</Button>\r\n                        <Button variant='outline-primary' active={active==10} value={10} onClick={(e)=>{changeDisplayedResultsPerPage(e)}}>10</Button>\r\n                        <Button variant='outline-primary' active={active==20} value={20} onClick={(e)=>{changeDisplayedResultsPerPage(e)}}>20</Button>\r\n                        <Button variant='outline-primary' active={active==50} value={50} onClick={(e)=>{changeDisplayedResultsPerPage(e)}}>50</Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    )\r\n};\r\n\r\nexport default PaginationPostPerPage;\r\n","import React, { useState } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport Posts from './Posts';\r\nimport PaginationItem from './PaginationItem';\r\nimport PaginationPostPerPage from './PaginationPostPerPage';\r\n\r\nconst PaginationPostComponent = ({ someData, isLoading }) => {\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postPerPage, setPostPerPage] = useState(10);\r\n\r\n    //Get current post\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage;\r\n    const currentPosts = someData.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n    const onPageChange = (pageNumber) => {\r\n        if(pageNumber === '...' || pageNumber === ' ...'){\r\n            setCurrentPage(currentPage+2);\r\n        } else if (pageNumber === '... '){\r\n            setCurrentPage(currentPage-2);\r\n        } else {\r\n            setCurrentPage(pageNumber);\r\n        }\r\n    };\r\n\r\n    const changeDisplayedResultsPerPage = (e) => {\r\n        setCurrentPage(1);\r\n        setPostPerPage(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <h3>Post from <a href='https://jsonplaceholder.typicode.com/' target='_blank'>jsonplaceholder</a></h3>\r\n            <PaginationPostPerPage changeDisplayedResultsPerPage={changeDisplayedResultsPerPage} postPerPage={postPerPage}/>\r\n            <PaginationItem postPerPage={postPerPage} totalPost={someData.length} onPageChange={onPageChange} currentPage={currentPage} />\r\n            <Posts posts={currentPosts} isLoading={isLoading}/>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default PaginationPostComponent;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport PaginationPostComponent from './components/PaginationPostComponent';\r\n\r\nfunction App() {\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n    const [resource, setResource] = useState([]);\r\n\r\n  // useEffect(() =>{\r\n  //   const fetchPost = async () => {\r\n  //       setIsError(false);\r\n  //       setIsLoading(true);\r\n  //     try{\r\n  //         const postData = await axios.get('https://jsonplaceholder.typicode.com/posts');\r\n  //         setResource(() => {return postData.data});\r\n  //     } catch (error) {\r\n  //         setIsError(true);\r\n  //     }\r\n  //       setIsLoading(false);\r\n  //   }\r\n  //   fetchPost();\r\n  // },[]);\r\n\r\n  return (\r\n      <div>\r\n            {isError && <div>Something went wrong ...</div>}\r\n            <PaginationPostComponent someData={resource} isLoading={isLoading} />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\n\r\nReactDOM.render(\r\n        <App />,\r\n    document.getElementById('root')\r\n);\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}