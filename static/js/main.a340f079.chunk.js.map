{"version":3,"sources":["components/Posts.js","components/PaginationItem.js","components/PaginationPostPerPage.js","components/PaginationPostComponent.js","App.js","serviceWorker.js","index.js"],"names":["Posts","posts","isLoading","Row","className","Col","ListGroup","map","post","Item","key","id","title","PaginationItem","postPerPage","totalPost","onPageChange","currentPage","active","pageNumbers","totalNumberOfPages","Math","ceil","i","push","tempPageNumber","length","sliced","slice","sliced1","sliced2","xs","Pagination","Prev","disabled","onClick","page","index","Badge","variant","Next","PaginationPostPerPage","changeDisplayedResultsPerPage","sm","href","target","ButtonGroup","aria-label","Button","value","e","PaginationPostComponent","someData","useState","setCurrentPage","setPostPerPage","indexOfLastPost","indexOfFirstPost","currentPosts","Container","pageNumber","App","setIsLoading","isError","setIsError","resource","setResource","useEffect","a","axios","get","postData","data","fetchPost","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a340f079.chunk.js","sourcesContent":["import React from \"react\";\nimport { ListGroup, Row, Col } from \"react-bootstrap\";\n\nconst Posts = ({ posts, isLoading }) => {\n  return (\n    <Row className=\"my-4 \">\n      <Col>\n        {isLoading ? (\n          <div>Loading ...</div>\n        ) : (\n          <ListGroup>\n            {posts.map((post) => {\n              return (\n                <ListGroup.Item key={post.id} className=\"post-bg\">\n                  <span>{post.id}. </span>\n                  <span>{post.title}</span>\n                </ListGroup.Item>\n              );\n            })}\n          </ListGroup>\n        )}\n      </Col>\n    </Row>\n  );\n};\n\nexport default Posts;\n","import React from \"react\";\nimport { Pagination, Row, Col, Badge } from \"react-bootstrap\";\n\nconst PaginationItem = ({\n  postPerPage,\n  totalPost,\n  onPageChange,\n  currentPage,\n}) => {\n  let active = currentPage;\n  let pageNumbers = [];\n  let totalNumberOfPages = Math.ceil(totalPost / postPerPage);\n  for (let i = 1; i <= totalNumberOfPages; i++) {\n    pageNumbers.push(i);\n  }\n\n  /**\n   * If have more than 10 pages logic\n   */\n  let tempPageNumber = pageNumbers;\n  if (pageNumbers.length <= 6) {\n    tempPageNumber = pageNumbers;\n  } else {\n    if (currentPage >= 1 && currentPage <= 3) {\n      tempPageNumber = [\n        1,\n        2,\n        3,\n        4,\n        \"...\",\n        pageNumbers.length - 1,\n        pageNumbers.length,\n      ];\n    } else if (currentPage === 4) {\n      const sliced = pageNumbers.slice(0, 5);\n      tempPageNumber = [...sliced, \" ...\", pageNumbers.length];\n    } else if (currentPage > 4 && currentPage < pageNumbers.length - 2) {\n      const sliced1 = pageNumbers.slice(currentPage - 2, currentPage);\n      const sliced2 = pageNumbers.slice(currentPage, currentPage + 1);\n      tempPageNumber = [\n        1,\n        2,\n        \"... \",\n        ...sliced1,\n        ...sliced2,\n        \" ...\",\n        pageNumbers.length,\n      ];\n    } else if (currentPage > pageNumbers.length - 3) {\n      const sliced = pageNumbers.slice(pageNumbers.length - 4);\n      tempPageNumber = [1, 2, \"... \", ...sliced];\n    }\n  }\n\n  return (\n    <Row className=\"my-4 justify-content-md-center font-pagination-size \">\n      <Col xs=\"auto\" className=\"post-bg\">\n        <Pagination>\n          <Pagination.Prev\n            disabled={currentPage === 1}\n            onClick={() => onPageChange(currentPage - 1)}\n          />\n          {tempPageNumber.map((page, index) => {\n            return (\n              <Pagination.Item\n                key={index}\n                active={page === active}\n                onClick={() => onPageChange(page)}\n              >\n                <Badge variant=\"light\">{page}</Badge>\n              </Pagination.Item>\n            );\n          })}\n          <Pagination.Next\n            disabled={currentPage === totalNumberOfPages}\n            onClick={() => onPageChange(currentPage + 1)}\n          />\n        </Pagination>\n      </Col>\n    </Row>\n  );\n};\n\nexport default PaginationItem;\n","import React from \"react\";\nimport { ButtonGroup, Row, Col, Button } from \"react-bootstrap\";\n\nconst PaginationPostPerPage = ({\n  changeDisplayedResultsPerPage,\n  postPerPage,\n}) => {\n  let active = postPerPage;\n  return (\n    <Row className=\"my-4 justify-content-md-center\">\n      <Col sm={8} className=\"text-center\">\n        <h3 className=\"title-paginaton\">\n          Post from{\" \"}\n          <a href=\"https://jsonplaceholder.typicode.com/\" target=\"_blank\">\n            jsonplaceholder\n          </a>\n        </h3>\n        <p className=\"font-weight-bold text-title title-paginaton\">\n        A simple project of pagination work. Choose how many results you want to see per page\n        </p>\n      </Col>\n      <Col sm={4}>\n        <div>\n          <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\n            <Button\n              variant=\"outline-primary\"\n              className=\"white-bg\"\n              active={active == 5}\n              value={5}\n              onClick={(e) => {\n                changeDisplayedResultsPerPage(e);\n              }}\n            >\n              5\n            </Button>\n            <Button\n              variant=\"outline-primary\"\n              className=\"white-bg\"\n              active={active == 10}\n              value={10}\n              onClick={(e) => {\n                changeDisplayedResultsPerPage(e);\n              }}\n            >\n              10\n            </Button>\n            <Button\n              variant=\"outline-primary\"\n              className=\"white-bg\"\n              active={active == 20}\n              value={20}\n              onClick={(e) => {\n                changeDisplayedResultsPerPage(e);\n              }}\n            >\n              20\n            </Button>\n            <Button\n              variant=\"outline-primary\"\n              className=\"white-bg\"\n              active={active == 50}\n              value={50}\n              onClick={(e) => {\n                changeDisplayedResultsPerPage(e);\n              }}\n            >\n              50\n            </Button>\n          </ButtonGroup>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nexport default PaginationPostPerPage;\n","import React, { useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport Posts from \"./Posts\";\nimport PaginationItem from \"./PaginationItem\";\nimport PaginationPostPerPage from \"./PaginationPostPerPage\";\n\nconst PaginationPostComponent = ({ someData, isLoading }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postPerPage, setPostPerPage] = useState(10);\n\n  //Get current post\n  const indexOfLastPost = currentPage * postPerPage;\n  const indexOfFirstPost = indexOfLastPost - postPerPage;\n  const currentPosts = someData.slice(indexOfFirstPost, indexOfLastPost);\n\n  const onPageChange = (pageNumber) => {\n    if (pageNumber === \"...\" || pageNumber === \" ...\") {\n      setCurrentPage(currentPage + 2);\n    } else if (pageNumber === \"... \") {\n      setCurrentPage(currentPage - 2);\n    } else {\n      setCurrentPage(pageNumber);\n    }\n  };\n\n  const changeDisplayedResultsPerPage = (e) => {\n    setCurrentPage(1);\n    setPostPerPage(e.target.value);\n  };\n\n  return (\n    <Container>\n      <PaginationPostPerPage\n        changeDisplayedResultsPerPage={changeDisplayedResultsPerPage}\n        postPerPage={postPerPage}\n      />\n      <Posts posts={currentPosts} isLoading={isLoading} />\n      <PaginationItem\n        postPerPage={postPerPage}\n        totalPost={someData.length}\n        onPageChange={onPageChange}\n        currentPage={currentPage}\n      />\n    </Container>\n  );\n};\n\nexport default PaginationPostComponent;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport PaginationPostComponent from \"./components/PaginationPostComponent\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [resource, setResource] = useState([]);\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      try {\n        const postData = await axios.get(\n          \"https://jsonplaceholder.typicode.com/posts\"\n        );\n        setResource(() => {\n          return postData.data;\n        });\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n    fetchPost();\n  }, []);\n\n  return (\n    <div>\n      {isError && <div>Something went wrong ...</div>}\n      <PaginationPostComponent someData={resource} isLoading={isLoading} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}